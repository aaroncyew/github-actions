name: Build Debian Packages
run-name: Build ${{ inputs.package }} ${{ inputs.version }} deb Package
on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      package:
        description: 'user space package'
        required: true
        type: string
        default: 'libvirt'
      version:
        description: 'user space version'
        required: true
        type: string
        default: 'v9.10.0'
      distro:
        description: 'distro'
        required: false
        type: string
        default: 'ubuntu'
      distro-version:
        description: 'distro version'
        required: false
        type: string
        default: '2204'
jobs:
  build_package:
    name: Build Package
    runs-on: self-hosted
    steps:
      - id: cleanup_libvirt
        name: Cleanout libvirt upstream repo
        run: | 
          sudo rm -rf libvirt/ deb-builder/ stack-bkc/
          #git config -l
          #env | sort
      - id: checkout_libvirt_patch
        uses: actions/checkout@v3
        with:
          repository: intel-innersource/os.linux.stack-bkc.packages
          path: stack-bkc
          fetch-depth: '0'
          fetch-tags: '0'
          clean: true
          token: ${{ secrets.DEB_BUILDER_TOKEN }}
      - id: checkout_libvirt
        name: Checkout libvirt upstream repo
        run: |
          git clone https://gitlab.com/libvirt/libvirt -b v9.10.0
          cd libvirt
          git submodule update --init --recursive
        #uses: actions/checkout@v3
        #with:
        #  repository: libvirt/libvirt
        #  ref: ${{ inputs.version }}
        #  submodules: recursive
        #  path: libvirt
      - id: checkout_frame_deb_builder
        name: Checkout Debian builder repo
        uses: actions/checkout@v3
        with:
          repository: intel-sandbox/frameworks.actions.deb-builder
          token: ${{ secrets.DEB_BUILDER_TOKEN }}
          clean: true
          path: deb-builder
      - id: libvirt_apply_patch
        name: Apply libvirt patches
        run: |
          cd libvirt/
          git am ../stack-bkc/emr/libvirt/0001-Add-IOMMUFD-object-support.patch
          git am ../stack-bkc/emr/libvirt/0002-Add-IOMMUFD-support-for-intel-iommu.patch
          git am ../stack-bkc/emr/libvirt/0003-Add-IOMMUFD-support-for-hostdev-passthrough.patch
          git am ../stack-bkc/emr/libvirt/0004-Add-more-parameters-support-for-intel-iommu.patch
          git am ../stack-bkc/emr/libvirt/0005-Add-more-parameters-support-for-hostdev-passthrough.patch
          git am ../stack-bkc/emr/libvirt/0001-qemu-Check-if-INTEL-Trust-Domain-Extention-support-i.patch
          git am ../stack-bkc/emr/libvirt/0002-qemu-Add-TDX-capability.patch
          git am ../stack-bkc/emr/libvirt/0003-conf-expose-TDX-feature-in-domain-capabilities.patch
          git am ../stack-bkc/emr/libvirt/0004-conf-add-tdx-as-launch-security-type.patch
          git am ../stack-bkc/emr/libvirt/0005-qemu-Add-command-line-and-validation-for-TDX-type.patch
          git am ../stack-bkc/emr/libvirt/0006-qemu-force-special-parameters-enabled-for-TDX-guest.patch
          git am ../stack-bkc/emr/libvirt/0007-qemu-add-hard-reboot-in-QEMU-driver.patch
          git am ../stack-bkc/emr/libvirt/0008-qemu-make-hard-reboot-as-the-TDX-default-reboot-mode.patch
          git am ../stack-bkc/emr/libvirt/0009-qemu-Extend-hard-reboot-in-Qemu-driver.patch
          git am ../stack-bkc/emr/libvirt/0010-virsh-add-new-option-timekeep-to-keep-virsh-console-.patch
          git am ../stack-bkc/emr/libvirt/0011-conf-Add-support-to-keep-same-domid-for-hard-reboot.patch
          git am ../stack-bkc/emr/libvirt/0012-Add-private-memfd-host-memory-backend-for-QEMU.patch
          git am ../stack-bkc/emr/libvirt/0103-RHEL-Fix-virConnectGetMaxVcpus-output.patch
          git am ../stack-bkc/emr/libvirt/0106-RHEL-virscsi-Check-device-type-before-getting-it-s-d.patch
          git am ../stack-bkc/emr/libvirt/0107-RHEL-virscsi-Support-TAPEs-in-virSCSIDeviceGetDevNam.patch
          git am ../stack-bkc/emr/libvirt/0201-DROP-test-commandtest.patch
      - id: debuilder_apply_patch
        name: Apply Dockerfile Patch
        run: |
          cd deb-builder/
          git am libvirt/ci/container/patch/0001-Add-entrypoint-to-Dockerfile.patch   
      - id: libvirt_deb_builder
        name: Build source package
        uses: ./deb-builder/libvirt/ubuntu/2204
        with:
          token: ${{ secrets.DEB_BUILDER_TOKEN }}
      - id: libvirt_build_and_compile
        name: Build & compile ${{ inputs.package }} on ${{ inputs.distro }}-${{ inputs.distro-version }}
        shell: bash
        run: |
          cd deb-builder/libvirt/${{ inputs.distro }}/${{ inputs.distro-version }}
          docker run --rm -v $(pwd)/libvirt:/build/libvirt -v ${{ github.workspace }}/deb-builder:/root --workdir /build/libvirt registry.gitlab.com/libvirt/libvirt/ci-ubuntu-2204:latest ./entrypoint
          #docker run --rm -v $(pwd)/libvirt:/build/libvirt -v ${{ github.workspace }}/deb-builder:/root --workdir /build/libvirt registry.gitlab.com/libvirt/libvirt/ci-ubuntu-2204:latest meson setup build --error -Dsystem=true -Ddriver_qemu=enabled \
          #-Ddriver_libxl=enabled -Dsasl=enabled -Dpolkit=enabled -Ddriver_libvirtd=enabled -Ddriver_remote=enabled -Ddriver_test=enabled -Ddriver_vz=disabled -Ddriver_bhyve=disabled -Ddriver_ch=disabled -Ddriver_interface=enabled -Ddriver_network=enabled \
          #-Dstorage_fs=enabled -Dstorage_lvm=enabled -Dstorage_iscsi=enabled -Dstorage_iscsi_direct=enabled -Dlibiscsi=enabled -Dstorage_scsi=enabled -Dstorage_disk=enabled -Dstorage_mpath=enabled \
          #-Dstorage_rbd=enabled -Dstorage_gluster=enabled -Dglusterfs=enabled -Dstorage_zfs=enabled -Dstorage_vstorage=disabled \
          #-Dnumactl=enabled -Dnumad=enabled -Dcapng=enabled -Dfuse=enabled -Dnetcf=enabled -Dselinux=enabled -Dselinux_mount="/sys/fs/selinux" \
          #-Dapparmor=disabled -Dapparmor_profiles=disabled -Dsecdriver_apparmor=disabled -Dudev=enabled -Dyajl=enabled -Dlibpcap=enabled -Dlibnbd=enabled -Dlibnl=enabled -Daudit=enabled -Ddtrace=enabled -Dfirewalld=enabled -Dfirewalld_zone=enabled -Dwireshark_dissector=enabled \
          #-Dlibssh=enabled -Dlibssh2=enabled -Dpm_utils=disabled -Dnss=enabled -Dexpensive_tests=enabled -Dinit_script=systemd -Ddocs=enabled -Dtests=enabled -Drpath=disabled -Dlogin_shell=enabled
          #docker run --rm -v $(pwd)/libvirt:/build/libvirt -v ${{ github.workspace }}/deb-builder:/root --workdir /build/libvirt registry.gitlab.com/libvirt/libvirt/ci-ubuntu-2204:latest ninja -C build
          #echo docker run --rm -v $(pwd)/libvirt:/build/libvirt -v ${{ github.workspace }}/deb-builder:/root --workdir /build/libvirt registry.gitlab.com/libvirt/libvirt/ci-ubuntu-2204:latest ninja -C build test
          #docker run --rm -v $(pwd)/libvirt:/build/libvirt -v ${{ github.workspace }}/deb-builder:/root --workdir /build/libvirt registry.gitlab.com/libvirt/libvirt/ci-ubuntu-2204:latest ninja -C build install
