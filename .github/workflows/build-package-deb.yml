name: Build Debian Packages
run-name: Build ${{ inputs.package }} ${{ inputs.version }} deb Package

env: 
  GITHUB_DISTRO_NAME: ''
  GITHUB_DISTRO_VER: ''

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      package:
        description: 'user space package'
        required: true
        type: string
        default: 'libvirt'
      version:
        description: 'user space version'
        required: true
        type: string
        default: 'v9.10.0'
      distro:
        description: 'distro'
        required: false
        type: string
        default: 'debian'
jobs:
  build_package:
    name: Build Package
    runs-on: self-hosted
    strategy:
      fail-fast: true
      matrix:
        distro:
          - debian
        distro-version:
          - 12
          - 11
          - 10
    steps:
      - id: cleanup_libvirt
        name: Cleanout libvirt upstream repo
        run: | 
          sudo rm -rf libvirt/ deb-builder/
          #git config -l
          env | sort
          export GITHUB_DISTRO_NAME = "${{ matrix.distro }}"
          export GITHUB_DISTRO_VERSION = "${{ matrix.distro-version }}"
          echo 0
      - id: checkout_libvirt
        name: Checkout libvirt upstream repo
        uses: actions/checkout@v3
        with:
          repository: libvirt/libvirt
          ref: ${{ inputs.version }}
          submodules: recursive
          path: libvirt
      - id: checkout_frame_deb_builder
        name: Checkout Debian builder repo
        uses: actions/checkout@v3
        with:
          repository: intel-sandbox/frameworks.actions.deb-builder
          token: ${{ secrets.DEB_BUILDER_TOKEN }}
          clean: true
          path: deb-builder
      - id: libvirt_deb_builder
        name: Build source package
        uses: ./deb-builder/libvirt/debian
        with:
          token: ${{ secrets.DEB_BUILDER_TOKEN }}
      - id: libvirt_build_and_compile
        name: Build & compile ${{ inputs.package}} on ${{ matrix.distro }}
        shell: bash
        run: |
          docker run --rm -v $(pwd)/libvirt:/build/libvirt -v ${{ github.workspace }}/deb-builder:/root --workdir /build/libvirt registry.gitlab.com/libvirt/libvirt/ci-${{ matrix.distro }}-${{ matrix.distro-version }}:latest meson setup build --error -Dsystem=true -Ddriver_qemu=enabled
          docker run --rm -v $(pwd)/libvirt:/build/libvirt -v ${{ github.workspace }}/deb-builder:/root --workdir /build/libvirt registry.gitlab.com/libvirt/libvirt/ci-${{ matrix.distro }}-${{ matrix.distro-version }}:latest ninja -C build
          echo docker run --rm -v $(pwd)/libvirt:/build/libvirt -v ${{ github.workspace }}/deb-builder:/root --workdir /build/libvirt registry.gitlab.com/libvirt/libvirt/ci-${{ matrix.distro }}-${{ matrix.distro-version }}:latest ninja -C build test
          docker run --rm -v $(pwd)/libvirt:/build/libvirt -v ${{ github.workspace }}/deb-builder:/root --workdir /build/libvirt registry.gitlab.com/libvirt/libvirt/ci-${{ matrix.distro }}-${{ matrix.distro-version }}:latest ninja -C build install
