From 81092f353c9aa1bc4f3154e74a302a8881f72625 Mon Sep 17 00:00:00 2001
From: qiaoliu <qiao.liu@intel.com>
Date: Wed, 22 Dec 2021 15:43:14 +0800
Subject: [PATCH 4/9] Mingw do have pthread implementation change to adapt
 mixed compiling

---
 lib/eal/windows/include/pthread.h | 50 +++++++++++++++++++++++++++++--
 1 file changed, 48 insertions(+), 2 deletions(-)

diff --git a/lib/eal/windows/include/pthread.h b/lib/eal/windows/include/pthread.h
index 27fd2cca52..34b8b6958a 100644
--- a/lib/eal/windows/include/pthread.h
+++ b/lib/eal/windows/include/pthread.h
@@ -53,22 +53,36 @@ pthread_equal(pthread_t t1, pthread_t t2)
 	return t1 == t2;
 }
 
+#ifdef __MINGW32__
+void *   pthread_gethandle (pthread_t t);
+#endif
+
 static inline int
 pthread_setaffinity_np(pthread_t threadid, size_t cpuset_size,
 			rte_cpuset_t *cpuset)
 {
 	DWORD_PTR ret = 0;
 	HANDLE thread_handle;
+	bool bneedclose = true;
 
 	if (cpuset == NULL || cpuset_size == 0)
 		return -1;
 
 	thread_handle = OpenThread(THREAD_ALL_ACCESS, FALSE, threadid);
 	if (thread_handle == NULL) {
+
+#ifdef __MINGW32__
+        thread_handle = (HANDLE)pthread_gethandle(threadid);
+		if (thread_handle == NULL) {
+#endif
 		RTE_LOG_WIN32_ERR("OpenThread()");
 		return -1;
+#ifdef __MINGW32__
+		}
+		else
+			  bneedclose = false;
+#endif
 	}
-
 	ret = SetThreadAffinityMask(thread_handle, *cpuset->_bits);
 	if (ret == 0) {
 		RTE_LOG_WIN32_ERR("SetThreadAffinityMask()");
@@ -76,10 +90,16 @@ pthread_setaffinity_np(pthread_t threadid, size_t cpuset_size,
 	}
 
 close_handle:
+#ifdef __MINGW32__
+    if(bneedclose){
+#endif
 	if (CloseHandle(thread_handle) == 0) {
 		RTE_LOG_WIN32_ERR("CloseHandle()");
 		return -1;
 	}
+#ifdef __MINGW32__
+	}
+#endif
 	return (ret == 0) ? -1 : 0;
 }
 
@@ -153,8 +173,34 @@ static inline int
 pthread_join(__rte_unused pthread_t thread,
 	__rte_unused void **value_ptr)
 {
+    HANDLE thread_handle;
+    thread_handle = OpenThread(THREAD_ALL_ACCESS, FALSE, thread);
+	if (thread_handle == NULL) {
+		RTE_LOG_WIN32_ERR("OpenThread()");
+		return -1;
+	}
+    WaitForSingleObject(thread_handle, INFINITE);
+	if (CloseHandle(thread_handle) == 0) {
+		RTE_LOG_WIN32_ERR("CloseHandle()");
+		return -1;
+	}
+
 	return 0;
 }
+#ifdef __MINGW32__
+int
+pthread_mutex_init(pthread_mutex_t *mutex,
+		   __rte_unused pthread_mutexattr_t *attr);
+
+int
+pthread_mutex_lock(pthread_mutex_t *mutex);
+
+int
+pthread_mutex_unlock(pthread_mutex_t *mutex);
+
+int
+pthread_mutex_destroy(pthread_mutex_t *mutex);
+#else
 
 static inline int
 pthread_mutex_init(pthread_mutex_t *mutex,
@@ -184,7 +230,7 @@ pthread_mutex_destroy(pthread_mutex_t *mutex)
 	DeleteCriticalSection(mutex);
 	return 0;
 }
-
+#endif
 #ifdef __cplusplus
 }
 #endif
-- 
2.17.1

